<?php

namespace Bluehost\Maestro;

class REST_API {

	public function __construct() {

		$this->register_routes();
		$this->register_fields();

		add_action( 'rest_authentication_errors', array( $this, 'authenticate' ) );

	}

	/**
	 * Registers all custom REST API routes
	 *
	 * @since 1.0
	 */
	public function register_routes() {

		$controllers = array(
			'REST_SSO_Controller',
			'REST_Webpros_Controller',
		);

		foreach ( $controllers as $controller ) {
			$class    = __NAMESPACE__ . '\\' . $controller;
			$instance = new $class();
			$instance->register_routes();
		}

	}

	/**
	 * Registers custom fields added to existing WP REST API endpoints
	 *
	 * @since 1.0
	 */
	public function register_fields() {
		// Maestro Status field on Users endpoint
		// Only add this field for administrators
		if ( current_user_can( 'edit_users' ) ) {
			register_rest_field(
				'user',
				'bh_maestro',
				array(
					'get_callback'    => array( $this, 'is_user_maestro' ),
					'update_callback' => array( $this, 'update_maestro_key' ),
				)
			);
		}
	}

	/**
	 * Returns the BH Maestro Web Pro status of a specific user
	 *
	 * @param array $user An array of user data as returned from the REST API
	 *
	 * @return boolean
	 */
	public function is_user_maestro( $user ) {

		return is_user_maestro( $user['id'] );

	}

	/**
	 * Callback to update the BH Maestro identifier key and adjust user role
	 *
	 * @param string $key    The BH Maestro identifier key generated by the BH Maestro system
	 * @param object|WP_User The User to update the maestro key for
	 */
	public function update_maestro_key( $key, $user ) {

		$key = sanitize_text_field( $key );

		// If the supplied key is falsey, we'll trigger revocation of Maestro status
		// Otherwise we attempt to update it
		if ( ! $key ) {
			$status = revoke_maestro( $user->ID );
		} else {
			$status = update_maestro_key( $user->ID, $key );
		}

		// Return an error if the update failed for some reason
		if ( false === $status || is_wp_error( $status ) ) {
			return new \WP_Error(
				'rest_user_maestro_update_failed',
				__( 'Failed to modify maestro status.' ),
				array( 'status' => 500 )
			);
		}

		return true;

	}

	/**
	 * Attempt to authenticate the REST API request
	 *
	 * @since 1.0
	 *
	 * @param mixed $result Result of any other authentication attempts
	 *
	 * @return WP_Error|null|bool
	 */
	public function authenticate( $status ) {

		// Make sure there wasn't a different authentication method used before this
		if ( ! is_null( $status ) ) {
			return $status;
		}

		// Make sure this is a REST API request
		if ( ! defined( 'REST_REQUEST' ) || ! REST_REQUEST ) {
			return $status;
		}

		// Validate the provided JWT
		$jwt   = $this->get_authorization_header();
		$token = new Token();
		if ( ! $token->validate_token( $jwt ) ) {
			// Return the WP_Error for why the token wansn't validated
			return $token;
		}

		// Token is valid, so let's set the current user
		wp_set_current_user( $token->data->user->id );

		return true;
	}

	/**
	 * Get the token from an authorization header
	 *
	 * @since 1.0
	 *
	 * @return null|string The token from the authorization header or null
	 */
	function get_authorization_header() {
		if ( ! empty( $_SERVER['HTTP_AUTHORIZATION'] ) ) {
			return wp_unslash( $_SERVER['HTTP_AUTHORIZATION'] );
		}

		// Use getallheaders in case the HTTP_AUTHORIZATION header is stripped by a server configuration
		if ( function_exists( 'getallheaders' ) ) {
			$headers = getallheaders();

			// Check for the authorization header case-insensitively
			foreach ( $headers as $key => $value ) {
				if ( strtolower( $key ) === 'authorization' ) {
					return $value;
				}
			}
		}

		return null;
	}

}
